
flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000588  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000720  08000720  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000720  08000720  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000720  08000720  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000720  08000720  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000720  08000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000724  08000724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000734  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000734  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002199  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000890  00000000  00000000  000221d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  00022a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  00022d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f6a  00000000  00000000  00023010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000031ae  00000000  00000000  00036f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e910  00000000  00000000  0003a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a48  00000000  00000000  000b8a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000708 	.word	0x08000708

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000708 	.word	0x08000708

080001d8 <main>:
#include "main.h"

void xoa_flash();
void ghi_flash();

int main(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_Init();
 80001dc:	f000 f924 	bl	8000428 <HAL_Init>
	xoa_flash();
 80001e0:	f000 f806 	bl	80001f0 <xoa_flash>
	ghi_flash();
 80001e4:	f000 f850 	bl	8000288 <ghi_flash>
	return 0;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <xoa_flash>:

void xoa_flash(){
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
	uint32_t* SR = (uint32_t*)0x40023c0c;
 80001f6:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <xoa_flash+0x84>)
 80001f8:	60fb      	str	r3, [r7, #12]
	uint32_t* KEYR = (uint32_t*)0x40023c04;
 80001fa:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <xoa_flash+0x88>)
 80001fc:	60bb      	str	r3, [r7, #8]
	uint32_t* CR = (uint32_t*)0x40023c10;
 80001fe:	4b1f      	ldr	r3, [pc, #124]	; (800027c <xoa_flash+0x8c>)
 8000200:	607b      	str	r3, [r7, #4]

	if(((*CR>>31)&1) == 1){				// kiểm tra bit LOCK có đang khóa hay không =1 là đang bị khóa
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	0fdb      	lsrs	r3, r3, #31
 8000208:	2b01      	cmp	r3, #1
 800020a:	d105      	bne.n	8000218 <xoa_flash+0x28>
		*KEYR = 0x45670123;				// key mở khóa
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <xoa_flash+0x90>)
 8000210:	601a      	str	r2, [r3, #0]
		*KEYR = 0xCDEF89AB;				// key mở khóa
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	4a1b      	ldr	r2, [pc, #108]	; (8000284 <xoa_flash+0x94>)
 8000216:	601a      	str	r2, [r3, #0]
	}
	while(((*SR>>16)&1) == 1){};		// kiểm tra bit BSY trong thanh ghi STRT có bận không
 8000218:	bf00      	nop
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	0c1b      	lsrs	r3, r3, #16
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d1f8      	bne.n	800021a <xoa_flash+0x2a>
	*CR |= 1<<1;						// bật sector ease mode
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f043 0202 	orr.w	r2, r3, #2
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	601a      	str	r2, [r3, #0]
	*CR |= 7<<3;						// chọn sector cần xóa (section 7)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f043 0238 	orr.w	r2, r3, #56	; 0x38
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	601a      	str	r2, [r3, #0]
	*CR |= 1<<16;						// bật bit STRT để xóa dữ liệu sector
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	601a      	str	r2, [r3, #0]
	while(((*SR>>16)&1) ==1){}			// kiểm tra bit BSY trong thanh ghi STRT có bận không
 800024c:	bf00      	nop
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	0c1b      	lsrs	r3, r3, #16
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d1f8      	bne.n	800024e <xoa_flash+0x5e>
	*CR &= ~(1<<1);						// tắt sector ease mode
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f023 0202 	bic.w	r2, r3, #2
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	601a      	str	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40023c0c 	.word	0x40023c0c
 8000278:	40023c04 	.word	0x40023c04
 800027c:	40023c10 	.word	0x40023c10
 8000280:	45670123 	.word	0x45670123
 8000284:	cdef89ab 	.word	0xcdef89ab

08000288 <ghi_flash>:
void ghi_flash(){
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
	uint32_t* SR = (uint32_t*)0x40023c0c;
 800028e:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <ghi_flash+0x6c>)
 8000290:	60fb      	str	r3, [r7, #12]
	uint32_t* KEYR = (uint32_t*)0x40023c04;
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <ghi_flash+0x70>)
 8000294:	60bb      	str	r3, [r7, #8]
	uint32_t* CR = (uint32_t*)0x40023c10;
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <ghi_flash+0x74>)
 8000298:	607b      	str	r3, [r7, #4]

	if(((*CR>>31)&1) == 1){				// kiểm tra bit LOCK có đang khóa hay không =1 là đang bị khóa
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	0fdb      	lsrs	r3, r3, #31
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d105      	bne.n	80002b0 <ghi_flash+0x28>
		*KEYR = 0x45670123;				// key mở khóa
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <ghi_flash+0x78>)
 80002a8:	601a      	str	r2, [r3, #0]
		*KEYR = 0xCDEF89AB;				// key mở khóa
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	4a15      	ldr	r2, [pc, #84]	; (8000304 <ghi_flash+0x7c>)
 80002ae:	601a      	str	r2, [r3, #0]
	}
	while(((*SR>>16)&1) == 1){};		// kiểm tra bit BSY trong thanh ghi STRT có bận không
 80002b0:	bf00      	nop
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	0c1b      	lsrs	r3, r3, #16
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d1f8      	bne.n	80002b2 <ghi_flash+0x2a>
	*CR |= 1;							// bật, kích hoạt PG
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f043 0201 	orr.w	r2, r3, #1
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	601a      	str	r2, [r3, #0]

	uint8_t* flash = (uint8_t*)0x08060000;	// địa chỉ SECTOR 7 (3.1)
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <ghi_flash+0x80>)
 80002ce:	603b      	str	r3, [r7, #0]
	*flash = 'x';
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	2278      	movs	r2, #120	; 0x78
 80002d4:	701a      	strb	r2, [r3, #0]
	while(((*SR>>16)&1) == 1){};		// kiểm tra bit BSY trong thanh ghi STRT có bận không
 80002d6:	bf00      	nop
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	0c1b      	lsrs	r3, r3, #16
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1f8      	bne.n	80002d8 <ghi_flash+0x50>
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40023c0c 	.word	0x40023c0c
 80002f8:	40023c04 	.word	0x40023c04
 80002fc:	40023c10 	.word	0x40023c10
 8000300:	45670123 	.word	0x45670123
 8000304:	cdef89ab 	.word	0xcdef89ab
 8000308:	08060000 	.word	0x08060000

0800030c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000312:	2300      	movs	r3, #0
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <HAL_MspInit+0x4c>)
 8000318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800031a:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <HAL_MspInit+0x4c>)
 800031c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000320:	6453      	str	r3, [r2, #68]	; 0x44
 8000322:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <HAL_MspInit+0x4c>)
 8000324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800032a:	607b      	str	r3, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	2300      	movs	r3, #0
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <HAL_MspInit+0x4c>)
 8000334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000336:	4a08      	ldr	r2, [pc, #32]	; (8000358 <HAL_MspInit+0x4c>)
 8000338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800033c:	6413      	str	r3, [r2, #64]	; 0x40
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <HAL_MspInit+0x4c>)
 8000340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800

0800035c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <NMI_Handler+0x4>

08000362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <HardFault_Handler+0x4>

08000368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <MemManage_Handler+0x4>

0800036e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <BusFault_Handler+0x4>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <UsageFault_Handler+0x4>

0800037a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a8:	f000 f890 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <SystemInit+0x20>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <SystemInit+0x20>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800040c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003da:	490e      	ldr	r1, [pc, #56]	; (8000414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003f0:	4c0b      	ldr	r4, [pc, #44]	; (8000420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003fe:	f7ff ffd7 	bl	80003b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000402:	f000 f95d 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000406:	f7ff fee7 	bl	80001d8 <main>
  bx  lr    
 800040a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800040c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000418:	08000728 	.word	0x08000728
  ldr r2, =_sbss
 800041c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000420:	2000002c 	.word	0x2000002c

08000424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC_IRQHandler>
	...

08000428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <HAL_Init+0x40>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <HAL_Init+0x40>)
 8000432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <HAL_Init+0x40>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <HAL_Init+0x40>)
 800043e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_Init+0x40>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <HAL_Init+0x40>)
 800044a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800044e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000450:	2003      	movs	r0, #3
 8000452:	f000 f901 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000456:	200f      	movs	r0, #15
 8000458:	f000 f808 	bl	800046c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800045c:	f7ff ff56 	bl	800030c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40023c00 	.word	0x40023c00

0800046c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_InitTick+0x54>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_InitTick+0x58>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000482:	fbb3 f3f1 	udiv	r3, r3, r1
 8000486:	fbb2 f3f3 	udiv	r3, r2, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f90b 	bl	80006a6 <HAL_SYSTICK_Config>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	e00e      	b.n	80004b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b0f      	cmp	r3, #15
 800049e:	d80a      	bhi.n	80004b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a0:	2200      	movs	r2, #0
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	f04f 30ff 	mov.w	r0, #4294967295
 80004a8:	f000 f8e1 	bl	800066e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <HAL_InitTick+0x5c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e000      	b.n	80004b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000008 	.word	0x20000008
 80004c8:	20000004 	.word	0x20000004

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_IncTick+0x20>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_IncTick+0x24>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_IncTick+0x24>)
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000008 	.word	0x20000008
 80004f0:	20000028 	.word	0x20000028

080004f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800051c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000526:	4a04      	ldr	r2, [pc, #16]	; (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	60d3      	str	r3, [r2, #12]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <__NVIC_GetPriorityGrouping+0x18>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	0a1b      	lsrs	r3, r3, #8
 8000546:	f003 0307 	and.w	r3, r3, #7
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000568:	2b00      	cmp	r3, #0
 800056a:	db0a      	blt.n	8000582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	b2da      	uxtb	r2, r3
 8000570:	490c      	ldr	r1, [pc, #48]	; (80005a4 <__NVIC_SetPriority+0x4c>)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	0112      	lsls	r2, r2, #4
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	440b      	add	r3, r1
 800057c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000580:	e00a      	b.n	8000598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4908      	ldr	r1, [pc, #32]	; (80005a8 <__NVIC_SetPriority+0x50>)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 030f 	and.w	r3, r3, #15
 800058e:	3b04      	subs	r3, #4
 8000590:	0112      	lsls	r2, r2, #4
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	440b      	add	r3, r1
 8000596:	761a      	strb	r2, [r3, #24]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000e100 	.word	0xe000e100
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	f1c3 0307 	rsb	r3, r3, #7
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	bf28      	it	cs
 80005ca:	2304      	movcs	r3, #4
 80005cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	3304      	adds	r3, #4
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	d902      	bls.n	80005dc <NVIC_EncodePriority+0x30>
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	3b03      	subs	r3, #3
 80005da:	e000      	b.n	80005de <NVIC_EncodePriority+0x32>
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	f04f 32ff 	mov.w	r2, #4294967295
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	43da      	mvns	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	401a      	ands	r2, r3
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f4:	f04f 31ff 	mov.w	r1, #4294967295
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	43d9      	mvns	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	4313      	orrs	r3, r2
         );
}
 8000606:	4618      	mov	r0, r3
 8000608:	3724      	adds	r7, #36	; 0x24
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3b01      	subs	r3, #1
 8000620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000624:	d301      	bcc.n	800062a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000626:	2301      	movs	r3, #1
 8000628:	e00f      	b.n	800064a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <SysTick_Config+0x40>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3b01      	subs	r3, #1
 8000630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000632:	210f      	movs	r1, #15
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f7ff ff8e 	bl	8000558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <SysTick_Config+0x40>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <SysTick_Config+0x40>)
 8000644:	2207      	movs	r2, #7
 8000646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	e000e010 	.word	0xe000e010

08000658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff47 	bl	80004f4 <__NVIC_SetPriorityGrouping>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b580      	push	{r7, lr}
 8000670:	b086      	sub	sp, #24
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000680:	f7ff ff5c 	bl	800053c <__NVIC_GetPriorityGrouping>
 8000684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	6978      	ldr	r0, [r7, #20]
 800068c:	f7ff ff8e 	bl	80005ac <NVIC_EncodePriority>
 8000690:	4602      	mov	r2, r0
 8000692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff5d 	bl	8000558 <__NVIC_SetPriority>
}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ffb0 	bl	8000614 <SysTick_Config>
 80006b4:	4603      	mov	r3, r0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	; (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	; (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	; (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 f818 	bl	8000708 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	08000720 	.word	0x08000720
 80006fc:	08000720 	.word	0x08000720
 8000700:	08000720 	.word	0x08000720
 8000704:	08000724 	.word	0x08000724

08000708 <_init>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr

08000714 <_fini>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	bf00      	nop
 8000718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071a:	bc08      	pop	{r3}
 800071c:	469e      	mov	lr, r3
 800071e:	4770      	bx	lr
