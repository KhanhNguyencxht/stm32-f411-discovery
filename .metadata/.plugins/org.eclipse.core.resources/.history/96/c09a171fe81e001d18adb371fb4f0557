#include <stdint.h>
#include "main.h"

void setup();

char doc();
char id;

int main(){
	HAL_Init();
	setup();
	id = doc();
	while(1){

	}
	return 0;
}

void setup(){
	__HAL_RCC_GPIOB_CLK_ENABLE();
		uint32_t* MODERB = (uint32_t*)0x40020400;
		*MODERB &= ~(0b11<<12);
		*MODERB &= ~(0b11<<18);
		*MODERB |= 0b10<<12 | 0b10<<18;		// nhường chân cho bộ ngoại vi

		uint32_t* PUPDRB = (uint32_t*)0x4002040c;
		*PUPDRB &= ~(0b11<<12);
		*PUPDRB &= ~(0b11<<18);
		*PUPDRB |= 0b01<<12 |0b01<<18;		// gim áp chân SCL, SDA áp mức cao

		uint32_t* AFRL = (uint32_t*)0x40020420;
		*AFRL &= ~(0b1111<<24);
		*AFRL |= 0b0100<<24;				// set bộ ngoại vi chân SCL(PB6)

		uint32_t* AFRH = (uint32_t*)0x40020424;
		*AFRH &= ~(0b1111<<4);
		*AFRH |= 0b0100<<4;					// set bộ ngoại vi chân SDA(PB9)

		__HAL_RCC_I2C1_CLK_ENABLE();
		uint32_t* CR1 = (uint32_t*)0x40005400;
		uint32_t* CR2 = (uint32_t*)0x40005404;
		uint32_t* CCR = (uint32_t*)0x4000541c;

		*CR1 &= ~(1<<0);					// TẮT i2c để set xung clock
		*CR2 |= 16;						// set xung cho I2C 16mhz
		*CCR = 160;							// 16mhz /160 = 100k, set bộ chia chế độ Sm mode
		*CR1 |= 1<<0;						// bật i2c

}

char doc(){
	uint32_t* DR = (uint32_t*)0x40005410;
	uint32_t* SR1 = (uint32_t*)0x40005414;
	uint32_t* SR2 = (uint32_t*)0x40005418;
	uint32_t* CR1 = (uint32_t*)0x40005400;

	const uint8_t sad_7bit = 0b0011001<<1;		//(0x19)<<1 7 bit + 1 bit chế độ đọc ghi là 8 bit
	const uint8_t ghi = 0;
	const uint8_t doc = 1;
	const uint8_t id_cb = 0x0f;

	while(((*SR2>>1)&1)==1){}			// trạng thái đợi bit BuSY đang bận
	*CR1 |= 1<<8; 						// 	start bit bật nhận dữ liệu
	while(((*SR1>>0)&1)==0){}			// đợi khi ADDR chưa truyền được bit start
	*DR = sad_7bit | ghi;				// gửi địa chỉ 7 bit + bit W(0) vào thanh ghi
	while(((*SR1>>1)&1)==0){}			// trạng thái kiểm tra DR gửi dữ liệu chưa
	uint32_t clear = *SR2;				// đọc SR1(software), đọc SR2 để clear ADDR
	*DR = id_cb;						// gửi địa chỉ đọc id cảm biến
	while(((*SR1>>2)&1)==0){}			// trạng thái đợi khi DR chưa truyền dữ liệu
	if(((*SR1>>10)&1)==1){				// ACK thất bại, không gửi tín hiệu về
		*SR1 &= ~(1<<10);
		return 0;						// thất bại, không nhận được tín hiệu trả về từ chảm biến
	}

	*SR1 &= ~(1<<10);					// tắt ack để đọc dữ liệu
	*CR1 |= 1<<8;						// start bit bật nhận dữ liệu
	while(((*SR1>>0)&1)==0){}			// đợi khi ADDR chưa truyền được bit start
	*DR = sad_7bit | doc;				// gửi địa chỉ 7 bit + bit R(0) vào thanh ghi
	while(((*SR1>>1)&1)==0){}			// trạng thái kiểm tra DR gửi dữ liệu chưa
	 clear = *SR2;						// đọc SR1(software), đọc SR2 để clear ADDR
	uint8_t dulieu = *DR;				// đọc dữ liệu được trả về
	*CR1 |= 1<<9;						// tắt bit nhận dữ liệu
	return dulieu;

}
