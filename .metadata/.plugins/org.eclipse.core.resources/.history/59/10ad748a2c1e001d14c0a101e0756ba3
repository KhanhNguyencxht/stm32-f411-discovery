#include <stdint.h>
#include "main.h"

void setup();

char doc();
char id;

int main(){
	HAL_Init();
	setup();

	while(1){
		id = doc();
	}
	return 0;
}

void setup(){
	/*enable peripherals clock*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_I2C1_CLK_ENABLE();

	uint32_t volatile* const GPIOB_MODER  = (uint32_t*)(0x40020400 + 0x00);
	uint32_t volatile* const GPIOB_PUPDR  = (uint32_t*)(0x40020400 + 0x0c);
	uint32_t volatile* const GPIOB_AFLR	  = (uint32_t*)(0x40020400 + 0x20);
	uint32_t volatile* const GPIOB_AFHR	  = (uint32_t*)(0x40020400 + 0x24);
	uint32_t volatile* const I2C1_CR1	  = (uint32_t*)(0x40005400 + 0x00);
	uint32_t volatile* const I2C1_CR2	  = (uint32_t*)(0x40005400 + 0x04);
	uint32_t volatile* const I2C1_CCR	  = (uint32_t*)(0x40005400 + 0x1c);

	/*PB6 PB9 as alternate function mode*/
	*GPIOB_MODER &= ~((0b11 << (2 * 6)) | (0b11 << (2 * 9)));
	*GPIOB_MODER |=   (0b10 << (2 * 6)) | (0b10 << (2 * 9));

	*GPIOB_PUPDR |=   (0b01 << (2 * 6)) | (0b01 << (2 * 9));

	/*alternate function 4*/
	*GPIOB_AFLR  |= (4 << (4 * 6));
	*GPIOB_AFHR  |= (4 << (4 * (9 - 8)));

	/*reset i2c*/
	*I2C1_CR1 |= (1 << 15);
	*I2C1_CR1 &= ~(1 << 15);

	/*disable i2c*/
	*I2C1_CR1 &= ~(1 << 0);

	/*peripheral clock : 16 MHz*/
	*I2C1_CR2 |= (16 << 0);

	/*prescale : 100 kHz*/
	*I2C1_CCR = 160;

	/*enable i2c*/
	*I2C1_CR1 |= (1 << 0);

}

char doc(){
	uint32_t* DR = (uint32_t*)0x40005410;
	uint32_t* SR1 = (uint32_t*)0x40005414;
	uint32_t* SR2 = (uint32_t*)0x40005418;
	uint32_t* CR1 = (uint32_t*)0x40005400;

	const uint8_t sad_7bit = 0b0011001<<1;		//(0x19)<<1 7 bit + 1 bit chế độ đọc ghi là 8 bit
	const uint8_t ghi = 0;
	const uint8_t doc = 1;
	const uint8_t id_cb = 0x0f;

	while(((*SR2>>1)&1)==1){}			// trạng thái đợi bit BuSY đang bận
	*CR1 |= 1<<8; 						// 	start bit bật nhận dữ liệu
	while(((*SR1>>0)&1)==0){}			// đợi khi ADDR chưa truyền được bit start
	*DR = sad_7bit | ghi;				// gửi địa chỉ 7 bit + bit W(0) vào thanh ghi
	while(((*SR1>>1)&1)==0){}			// trạng thái kiểm tra DR gửi dữ liệu chưa
	uint32_t clear = *SR2;				// đọc SR1(software), đọc SR2 để clear ADDR
	*DR = id_cb;						// gửi địa chỉ đọc id cảm biến
	while(((*SR1>>2)&1)==0){}			// trạng thái đợi khi DR chưa truyền dữ liệu
	if(((*SR1>>10)&1)==1){				// ACK thất bại, không gửi tín hiệu về
		*SR1 &= ~(1<<10);
		return 0;						// thất bại, không nhận được tín hiệu trả về từ chảm biến
	}

	*SR1 &= ~(1<<10);					// tắt ack để đọc dữ liệu
	*CR1 |= 1<<8;
	while(((*SR1>>1)&1)==0){}			// đợi khi ADDR chưa truyền được bit start
	*DR = sad_7bit | doc;				// gửi địa chỉ 7 bit + bit R(0) vào thanh ghi
	while(((*SR1>>1)&1)==0){}			// trạng thái kiểm tra DR gửi dữ liệu chưa
	uint32_t clea = *SR2;				// đọc SR1(software), đọc SR2 để clear ADDR
	uint8_t dulieu = *DR;					// đọc dữ liệu được trả về
	*CR1 |= 1<<9;						// tắt bit nhận dữ liệu
	return dulieu;

}
