
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  0800043c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000444  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000448  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000448  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001307  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e0  00000000  00000000  0002133b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00021820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  000219e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c00  00000000  00000000  00021b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ea4  00000000  00000000  00035768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e576  00000000  00000000  0003760c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5b82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  000b5bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000424 	.word	0x08000424

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000424 	.word	0x08000424

080001d8 <main>:
#include"stdint.h"
#include <main.h>

void pwm();

void main(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	 pwm();
 80001dc:	f000 f802 	bl	80001e4 <pwm>

}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <pwm>:

void pwm(){
 80001e4:	b480      	push	{r7}
 80001e6:	b08b      	sub	sp, #44	; 0x2c
 80001e8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();  // bật chân GPIOD
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	4b35      	ldr	r3, [pc, #212]	; (80002c4 <pwm+0xe0>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f2:	4a34      	ldr	r2, [pc, #208]	; (80002c4 <pwm+0xe0>)
 80001f4:	f043 0308 	orr.w	r3, r3, #8
 80001f8:	6313      	str	r3, [r2, #48]	; 0x30
 80001fa:	4b32      	ldr	r3, [pc, #200]	; (80002c4 <pwm+0xe0>)
 80001fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fe:	f003 0308 	and.w	r3, r3, #8
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
	uint32_t* MODER = 0x40020c00;
 8000206:	4b30      	ldr	r3, [pc, #192]	; (80002c8 <pwm+0xe4>)
 8000208:	627b      	str	r3, [r7, #36]	; 0x24
	*MODER &= ~(0b11<<24);		//reset chân 12 về 0
 800020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000214:	601a      	str	r2, [r3, #0]
	*MODER |= 0b10<<24;			// set chân 12 nhường quyền điều khiển cho bộ ngoại vi ob00 IN, 0b11 OUT, 0b10, ngoại vi; 157ref
 8000216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000220:	601a      	str	r2, [r3, #0]

	uint32_t* AFRH = 0x40020c24;
 8000222:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <pwm+0xe8>)
 8000224:	623b      	str	r3, [r7, #32]
	*AFRH &= ~(0b1111<<16);		//seset chân ngoại vi 12 về 0 mỗi ngoại vi là 4 bit
 8000226:	6a3b      	ldr	r3, [r7, #32]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800022e:	6a3b      	ldr	r3, [r7, #32]
 8000230:	601a      	str	r2, [r3, #0]
	*AFRH |= 0b0010<<16;		//trường hợp 1 chân có nhiều bộ ngoại vi thì dùng bộ ngoại vi nào thì set bộ ngoại vi đó T50data, 162ref
 8000232:	6a3b      	ldr	r3, [r7, #32]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	601a      	str	r2, [r3, #0]

	__HAL_RCC_TIM4_CLK_ENABLE();	// chân D12 bộ phát xung là TIM4
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]
 8000242:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <pwm+0xe0>)
 8000244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000246:	4a1f      	ldr	r2, [pc, #124]	; (80002c4 <pwm+0xe0>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6413      	str	r3, [r2, #64]	; 0x40
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <pwm+0xe0>)
 8000250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]
	uint32_t* PSC = 0x40000828;
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <pwm+0xec>)
 800025c:	61fb      	str	r3, [r7, #28]
	uint32_t* ARR = 0x4000082c;
 800025e:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <pwm+0xf0>)
 8000260:	61bb      	str	r3, [r7, #24]
	uint32_t* CCR1 = 0x40000834;
 8000262:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <pwm+0xf4>)
 8000264:	617b      	str	r3, [r7, #20]
	*PSC = 16000 - 1; 			// BỘ CHIA 16000000mhz xuống 16000khz
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800026c:	601a      	str	r2, [r3, #0]
	*ARR = 10 - 1;			// 1000 tương đương 1ms số càng nhỏ nháy càng nhanh
 800026e:	69bb      	ldr	r3, [r7, #24]
 8000270:	2209      	movs	r2, #9
 8000272:	601a      	str	r2, [r3, #0]
	*CCR1 = 2 - 1;			// độ rộng xung 500 tương đương 500ms, độ rộng càng lớn thì đèn càng sáng
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]

	uint32_t* CCMR1 = 0x40000818; // địa chỉ của thanh mode sử dụng kênh CH1 thì địa chỉ là CCMR1....
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <pwm+0xf8>)
 800027c:	613b      	str	r3, [r7, #16]
	*CCMR1 &= ~(0b111<<4);	// reset OC1M, là đỉa chỉ của OC1M bit thứ 4 trang 362ref
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	601a      	str	r2, [r3, #0]
	*CCMR1 |= 0b110<<4;		// bật chế đô mode1 lên xung thuận là mode1 xung nghịch là mode2
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	601a      	str	r2, [r3, #0]

	uint32_t* CCER = 0x40000820;	// địa chỉ của kênh CH1
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <pwm+0xfc>)
 8000298:	60fb      	str	r3, [r7, #12]
	*CCER |= 1<<0;				// bật kênh CH1 tên là CC1E  365ref
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0201 	orr.w	r2, r3, #1
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
	uint32_t* CR1 = 0x40000800; // bộ đếm couter timer của TIM4;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <pwm+0x100>)
 80002a8:	60bb      	str	r3, [r7, #8]
	*CR1 |=1<<0; 				// Bật bộ đếm couter tên là CEN lên
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 0201 	orr.w	r2, r3, #1
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	601a      	str	r2, [r3, #0]

}
 80002b6:	bf00      	nop
 80002b8:	372c      	adds	r7, #44	; 0x2c
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020c00 	.word	0x40020c00
 80002cc:	40020c24 	.word	0x40020c24
 80002d0:	40000828 	.word	0x40000828
 80002d4:	4000082c 	.word	0x4000082c
 80002d8:	40000834 	.word	0x40000834
 80002dc:	40000818 	.word	0x40000818
 80002e0:	40000820 	.word	0x40000820
 80002e4:	40000800 	.word	0x40000800

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <UsageFault_Handler+0x4>

08000306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000334:	f000 f83e 	bl	80003b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <SystemInit+0x20>)
 8000342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000346:	4a05      	ldr	r2, [pc, #20]	; (800035c <SystemInit+0x20>)
 8000348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800034c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000ed00 	.word	0xe000ed00

08000360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000366:	490e      	ldr	r1, [pc, #56]	; (80003a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000368:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800037c:	4c0b      	ldr	r4, [pc, #44]	; (80003ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800038a:	f7ff ffd7 	bl	800033c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800038e:	f000 f825 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000392:	f7ff ff21 	bl	80001d8 <main>
  bx  lr    
 8000396:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a4:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003ac:	20000024 	.word	0x20000024

080003b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_IncTick+0x20>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_IncTick+0x24>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_IncTick+0x24>)
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000020 	.word	0x20000020

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4d0d      	ldr	r5, [pc, #52]	; (8000414 <__libc_init_array+0x38>)
 80003e0:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e2:	1b64      	subs	r4, r4, r5
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	2600      	movs	r6, #0
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	4d0b      	ldr	r5, [pc, #44]	; (800041c <__libc_init_array+0x40>)
 80003ee:	4c0c      	ldr	r4, [pc, #48]	; (8000420 <__libc_init_array+0x44>)
 80003f0:	f000 f818 	bl	8000424 <_init>
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	2600      	movs	r6, #0
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f855 3b04 	ldr.w	r3, [r5], #4
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f855 3b04 	ldr.w	r3, [r5], #4
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
